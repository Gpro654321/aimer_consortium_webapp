version: "3.9"

services:
  web:
    build: .
    volumes:
      - static_volume:/code/workshop_registration/staticfiles # Mount the static files where Django collects them
      - .:/code
      - media_volume:/code/media
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env  # Explicitly load the .env file
    environment:
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}  # Use the environment variable
      - DEBUG=1  # Turn off debug for production
      - ALLOWED_HOSTS=140.238.243.169,localhost  # Replace with your instance domain or IP
      - USE_TZ=True
      - TIME_ZONE=Asia/Kolkata
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host('140.238.243.169')"
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.services.web.loadbalancer.server.port=8000"

  nginx:
    image: nginx:latest
    volumes:
      - static_volume:/var/www/static # Mount to where Nginx serves from
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.static.rule=Host(`140.238.243.169`) && PathPrefix(`/static`)"
      - "traefik.http.routers.static.entrypoints=web"
      - "traefik.http.services.static.loadbalancer.server.port=80"
    ports:
       - "8081:80" #Expose nginx on different port for testing, traefik will handle 80

  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./acme.json:/acme.json
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --api.insecure=true
      - --log.level=DEBUG

  db:
    image: postgres:15
    environment:
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env  # Explicitly load the .env file
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./healthcheck.sh:/healthcheck.sh  # Mount the script from the current directory
      - ./db_init:/docker-entrypoint-initdb.d/  # Mount the init script and init.sql

    healthcheck:
      test: ["CMD-SHELL", "/healthcheck.sh"]  # Run the health check script
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  static_volume:
  media_volume:

# there are two staticfiles directory...